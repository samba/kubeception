# TODO: Apply NetworkPolicy to prevent the inner cluster from accessing the 
#   host control plane.
#  https://kubernetes.io/docs/concepts/services-networking/network-policies/
# 
# TODO: Provide pod IP as bind address, etc... 
#    cf. https://akomljen.com/kubernetes-environment-variables/
#    cf. https://kubernetes.io/docs/tasks/inject-data-application/downward-api-volume-expose-pod-information/
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: kubeception-apiserver
  namespace: kubeception
spec:
  replicas: 1
  selector: 
    matchLabels:
      role.kubeception: apiserver
  template:
      metadata:
        namespace: kubeception
        name: kubeception-apiserver
        labels: 
          role.kubeception: apiserver
          tier: control-plane
          component: api-server
      spec:
        containers:
          - name: hyperkube-apiserver
            image: k8s.gcr.io/hyperkube:v1.11.0
            command: 
              - '/hyperkube'
              - 'kube-apiserver'
              - '--v=3'
              - '--allow-privileged=false'
              - '--etcd-servers=https://$(ETCD_SERVER):$(ETCD_PORT)'
              - '--bind-address=0.0.0.0'
              - '--anonymous-auth=false'
              - '--authorization-mode=RBAC'
              - '--secure-port=6443'
              - '--insecure-port=8080'  # kept for testing, temporarily.
              - '--runtime-config=api/all=true,batch/v2alpha1=true,rbac.authorization.k8s.io/v1alpha1=true'
              - '--service-cluster-ip-range=10.150.0.0/16'  # XXX this will need to be tuned in each host cluster, for each guest cluster
              - '--etcd-cafile=/opt/kubernetes/certs/apiserver/ca.crt'
              - '--etcd-certfile=/opt/kubernetes/certs/apiserver/etcd.crt'
              - '--etcd-keyfile=/opt/kubernetes/certs/apiserver/etcd.key'
              - '--tls-cert-file=/opt/kubernetes/certs/apiserver/api.crt'
              - '--tls-private-key-file=/opt/kubernetes/certs/apiserver/api.key'
              - '--kubelet-client-key=/opt/kubernetes/certs/apiserver/api.key'
              - '--kubelet-client-certificate=/opt/kubernetes/certs/apiserver/api.crt'
              - '--kubelet-certificate-authority=/opt/kubernetes/certs/apiserver/ca.crt'
              - '--client-ca-file=/opt/kubernetes/certs/apiserver/ca.crt'
              - '--token-auth-file=/opt/kubernetes/certs/apiserver/tokens.csv'
              - '--service-account-key-file=/opt/kubernetes/certs/apiserver/controller.pub'
              - '--kubelet-preferred-address-types=InternalIP,Hostname'  # XXX allows ignoring DNS
              - '--feature-gates=TokenRequest=true'
              - '--enable-bootstrap-token-auth'
            ports:
              - name: https
                containerPort: 6443
              - name: http
                containerPort: 8080
            env:
              - name: ETCD_SERVER
                value: kubeception-etcd
              - name: ETCD_PORT
                value: '2379'
            volumeMounts:
              - mountPath: /opt/kubernetes/certs/apiserver
                name: apiserver-secrets
          - name: hyperkube-proxy
            image: k8s.gcr.io/hyperkube:v1.11.0
            command:
                - '/hyperkube'
                - 'kube-proxy' # TODO: use a configfile here instead too. flags are deprecated.
                - '--proxy-mode=userspace'
                - '--master=https://localhost:6443'
                - '--kubeconfig=/opt/kubernetes/certs/apiserver/proxy.kubeconfig'
            securityContext:
              privileged: true
            volumeMounts:
              - mountPath: /opt/kubernetes/certs/apiserver
                name: apiserver-secrets
        volumes:
        - name: apiserver-secrets
          secret:
            secretName: apiserver.kubeception

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: kubeception-scheduler
  namespace: kubeception
spec:
  replicas: 1
  selector: 
    matchLabels:
      role.kubeception: scheduler
  template:
      metadata:
        namespace: kubeception
        name: kubeception-scheduler
        labels: 
          role.kubeception: scheduler
          tier: control-plane
          component: scheduler
      spec:
        containers:
          - name: hyperkube-scheduler
            image: k8s.gcr.io/hyperkube:v1.11.0
            command:  # XXX arguments are deprecated. TODO provide config file.
              - '/hyperkube'
              - 'kube-scheduler'
              - '--kubeconfig=/opt/kubernetes/certs/system.scheduler.kubeconfig'
              - '--leader-elect=false'
              - '--master=$(API_SERVER)'
              - '--v=2'
            volumeMounts:
              - mountPath: /opt/kubernetes/certs
                name: kubeconfig
            env:
              - name: API_SERVER
                value: https://kubernetes-kubeception:443/
        volumes:
        - name: kubeconfig
          secret:
            secretName: system.kubeconfig.kubeception


---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: kubeception-controller-manager
  namespace: kubeception
spec:
  replicas: 1
  selector: 
    matchLabels:
      role.kubeception: controller-manager
  template:
      metadata:
        namespace: kubeception
        name: kubeception-controller-manager
        labels: 
          role.kubeception: controller-manager
          tier: control-plane
          component: controller-manager
      spec:
        containers:
          - name: hyperkube-controller-manager
            image: k8s.gcr.io/hyperkube:v1.11.0
            command:
              - '/hyperkube'
              - 'kube-controller-manager'
              - '--kubeconfig=/opt/kubernetes/certs/system.controller.kubeconfig'
              - '--leader-elect=false'
              - '--master=$(API_SERVER)'
              - '--use-service-account-credentials'
              - '--service-account-private-key-file=/opt/kubernetes/controller/controller.key'
              - '--root-ca-file=/opt/kubernetes/controller/ca.crt'
              - '--controllers=tokencleaner,bootstrapsigner,*'
              - '--cluster-signing-cert-file=/opt/kubernetes/controller/ca.crt'
              - '--cluster-signing-key-file=/opt/kubernetes/controller/ca.key'
              - '--feature-gates=RotateKubeletServerCertificate=true'
              - '--v=2'
            volumeMounts:
              - mountPath: /opt/kubernetes/certs
                name: kubeconfig
              - mountPath: /opt/kubernetes/controller
                name: controller
            env:
              - name: API_SERVER
                value: https://kubernetes-kubeception:443/
        volumes:
        - name: kubeconfig
          secret:
            secretName: system.kubeconfig.kubeception
        - name: controller
          secret:
            secretName: controller.kubeception

---

kind: Service
apiVersion: v1
metadata:
  name:  kubernetes-kubeception
  namespace: kubeception
spec:
  selector:
    role.kubeception:  apiserver
  type: ClusterIP  # TODO: eventually this will be exposed for customer.
  ports:
  - name:  https
    port:  443
    targetPort:  https

---
